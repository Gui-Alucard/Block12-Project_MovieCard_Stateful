{"version":3,"sources":["components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Rating","rating","this","props","className","data-testid","React","Component","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","SearchBar","bookmarkedOnly","onBookmarkedChange","htmlFor","id","type","checked","onChange","selectedGenre","onSelectedGenreChange","value","searchText","onSearchTextChange","placeholder","renderFavorite","renderSelect","AddMovie","newState","bind","newRating","returnState","newFavorite","reset","state","genre","bookmarked","stateKey","target","setState","Number","event","myFunctReset","alteredValue","cols","rows","onClick","renderTitle","renderSubTitle","renderImage","renderStoryline","renderRate","renderGenero","MovieLibrary","handleText","handleFavorite","handleGenre","newMovie","concat","e","newMoviesList","filter","Movie","includes","push","undefined","Header","App","onclickBtn","data","oldState","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAaeA,E,uKAVH,IACAC,EAAWC,KAAKC,MAAhBF,OACR,OACE,yBAAKG,UAAU,oBAAoBC,cAAY,UAC7C,0BAAMD,UAAU,UAAUH,Q,GALbK,IAAMC,WCoBZC,E,uKAjBH,IACAC,EAAUP,KAAKC,MAAfM,MACAC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,SAAUC,EAAiCH,EAAjCG,UAAWX,EAAsBQ,EAAtBR,OAAQY,EAAcJ,EAAdI,UAC5C,OACE,yBAAKT,UAAU,aAAaC,cAAY,cACtC,yBAAKS,IAAI,cAAcV,UAAU,mBAAmBW,IAAKF,IACzD,yBAAKT,UAAU,mBACb,wBAAIC,cAAY,mBAAmBD,UAAU,oBAAoBM,GACjE,wBAAIN,UAAU,uBAAuBO,GACrC,uBAAGP,UAAU,wBAAwBQ,IAEvC,kBAAC,EAAD,CAAQX,OAAQA,S,GAZAK,IAAMC,WCcfS,E,uKAbH,IACAC,EAAWf,KAAKC,MAAhBc,OAER,OACE,yBAAKZ,cAAY,aAAaD,UAAU,cACrCa,EAAOC,KAAI,SAACT,GAAD,OAAW,kBAAC,EAAD,CAAWU,IAAKV,EAAMC,MAAOD,MAAOA,Y,GAN3CH,IAAMC,WCoEfa,E,+KApEK,IAAD,EACgClB,KAAKC,MAA5CkB,EADO,EACPA,eAAgBC,EADT,EACSA,mBACxB,OACE,2BAAOC,QAAQ,QAAQlB,cAAY,wBACjC,2BACEmB,GAAG,QACHpB,UAAU,QACVC,cAAY,iBACZoB,KAAK,WACLC,QAASL,EACTM,SAAUL,IAPd,+B,qCAcY,IAAD,EACoCpB,KAAKC,MAA9CyB,EADK,EACLA,cAAeC,EADV,EACUA,sBACvB,OACE,2BAAON,QAAQ,SAASlB,cAAY,sBAApC,wBAEE,4BACEA,cAAY,eACZmB,GAAG,SACHM,MAAOF,EACPD,SAAUE,GAEV,4BAAQxB,cAAY,gBAAgByB,MAAM,IAA1C,SACA,4BAAQzB,cAAY,gBAAgByB,MAAM,UAA1C,cACA,4BAAQzB,cAAY,gBAAgByB,MAAM,UAA1C,cACA,4BAAQzB,cAAY,gBAAgByB,MAAM,YAA1C,gB,+BAME,IAAD,EACoC5B,KAAKC,MAAxC4B,EADD,EACCA,WAAYC,EADb,EACaA,mBACpB,OACE,0BAAM5B,UAAU,kBAAkBC,cAAY,mBAC5C,2BAAOkB,QAAQ,MAAMlB,cAAY,oBAAjC,kBAEE,2BACEmB,GAAG,MACHnB,cAAY,aACZoB,KAAK,OACLQ,YAAY,eACZH,MAAOC,EACPJ,SAAUK,KAGb9B,KAAKgC,iBACLhC,KAAKiC,oB,GAtDU5B,a,OCkMT6B,E,kDAjMb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAEDkC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,MAAQ,EAAKA,MAAMJ,KAAX,gBAEb,EAAKK,MAAQ,CACXjC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXX,OAAQ,EACRY,UAAW,GACX+B,MAAO,SACPC,YAAY,GAhBG,E,uDAoBEC,GAAW,IAArBC,EAAoB,EAApBA,OACT7C,KAAK8C,SAAL,eAAiBF,EAAWC,EAAOjB,U,kCAGfgB,GAAW,IAArBC,EAAoB,EAApBA,OACV7C,KAAK8C,SAAL,eAAiBF,EAAWG,OAAOF,EAAOjB,W,oCAGpBgB,GAAU,EAApBC,OACDjB,MACT5B,KAAK8C,SAAL,eAAiBF,GAAW,IAE5B5C,KAAK8C,SAAL,eAAiBF,GAAW,M,8BAK9B5C,KAAK8C,SAAS,CACZtC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXX,OAAQ,EACRY,UAAW,GACX+B,MAAO,SACPC,YAAY,M,kCAKJK,EAAOC,GACjB,IAAMd,EAAWnC,KAAKyC,MAItB,OAHIO,GAASC,GACXjD,KAAK8C,SAASX,GAETA,I,oCAGM,IAAD,OACJ3B,EAAUR,KAAKyC,MAAfjC,MACR,OACE,2BAAOa,QAAQ,QAAQlB,cAAY,qBAAnC,YAEE,2BACEoB,KAAK,OACLK,MAAOpB,EACPc,GAAG,QACHnB,cAAY,cACZsB,SAAU,SAACyB,GAAD,OAAkB,EAAKf,SAASe,EAAc,e,uCAM9C,IAAD,OACPzC,EAAaT,KAAKyC,MAAlBhC,SACR,OACE,2BAAOY,QAAQ,WAAWlB,cAAY,wBAAtC,eAEE,2BACEoB,KAAK,OACLK,MAAOnB,EACPa,GAAG,WACHnB,cAAY,iBACZsB,SAAU,SAACyB,GAAD,OAAkB,EAAKf,SAASe,EAAc,kB,oCAMjD,IAAD,OACJvC,EAAcX,KAAKyC,MAAnB9B,UACR,OACE,2BAAOU,QAAQ,YAAYlB,cAAY,qBAAvC,SAEE,2BACEoB,KAAK,OACLK,MAAOjB,EACPW,GAAG,YACHnB,cAAY,cACZsB,SAAU,SAACyB,GAAD,OAAkB,EAAKf,SAASe,EAAc,mB,wCAM7C,IAAD,OACRxC,EAAcV,KAAKyC,MAAnB/B,UACR,OACE,2BAAOW,QAAQ,YAAYlB,cAAY,yBAAvC,UAEE,8BACEyB,MAAOlB,EACPY,GAAG,YACHnB,cAAY,kBACZgD,KAAK,KACLC,KAAK,KACL3B,SAAU,SAACyB,GAAD,OAAkB,EAAKf,SAASe,EAAc,mB,mCAMlD,IAAD,OACHnD,EAAWC,KAAKyC,MAAhB1C,OACR,OACE,2BAAOsB,QAAQ,OAAOlB,cAAY,sBAAlC,kBAEE,2BACEoB,KAAK,SACLD,GAAG,OACHM,MAAO7B,EACPI,cAAY,eACZsB,SAAU,SAACyB,GAAD,OAAkB,EAAKb,UAAUa,EAAc,gB,qCAMjD,IAAD,OACLR,EAAU1C,KAAKyC,MAAfC,MACR,OACE,2BAAOrB,QAAQ,QAAQlB,cAAY,qBAAnC,YAEE,4BAAQA,cAAY,cAAcyB,MAAOc,EAAOpB,GAAG,QAAQG,SAAU,SAACyB,GAAD,OAAkB,EAAKf,SAASe,EAAc,WACjH,4BAAQ/C,cAAY,eAAeyB,MAAM,UAAzC,cACA,4BAAQzB,cAAY,eAAeyB,MAAM,UAAzC,cACA,4BAAQzB,cAAY,eAAeyB,MAAM,YAAzC,gB,uCAMU,IAAD,OACPe,EAAe3C,KAAKyC,MAApBE,WACR,OACE,2BAAOtB,QAAQ,WAAWlB,cAAY,0BAAtC,WAEE,2BACEoB,KAAK,WACLD,GAAG,WACHM,MAAOe,EACPxC,cAAY,mBACZsB,SAAU,SAACuB,GAAD,OAAW,EAAKT,YAAYS,EAAO,oB,+BAM3C,IAAD,OACCK,EAAYrD,KAAKC,MAAjBoD,QACR,OACE,0BAAMnD,UAAU,iBAAiBC,cAAY,kBAC1CH,KAAKsD,cACLtD,KAAKuD,iBACLvD,KAAKwD,cACLxD,KAAKyD,kBACLzD,KAAK0D,aACL1D,KAAK2D,eACL3D,KAAKgC,iBACN,4BACET,KAAK,SACLpB,cAAY,cACZkD,QAAS,SAACL,GAAD,OAAWK,EAAQ,EAAKf,YAAYU,EAAO,EAAKR,YAH3D,wB,GApLenC,aCqGRuD,E,kDAjGb,WAAY3D,GAAQ,IAAD,uBACjB,cAAMA,IAED4D,WAAa,EAAKA,WAAWzB,KAAhB,gBAClB,EAAK0B,eAAiB,EAAKA,eAAe1B,KAApB,gBACtB,EAAK2B,YAAc,EAAKA,YAAY3B,KAAjB,gBACnB,EAAKiB,QAAU,EAAKA,QAAQjB,KAAb,gBANE,IAQTrB,EAAW,EAAKd,MAAhBc,OARS,OASjB,EAAK0B,MAAQ,CACXZ,WAAY,GACZV,gBAAgB,EAChBO,cAAe,GACfX,UAbe,E,oDAiBXiC,GAAQ,IACNjC,EAAWf,KAAKC,MAAhBc,OACFiD,EAAWhB,EACjBhD,KAAK8C,SAAS,CACZjB,WAAY,GACZV,gBAAgB,EAChBO,cAAe,GACfX,OAAQA,EAAOkD,OAAOD,O,oCAIF,IAAXnB,EAAU,EAAVA,OACH9B,EAAWf,KAAKC,MAAhBc,OACFmD,EAAIrB,EAAOjB,MACXuC,EAAgB,GACtBpD,EAAOqD,QAAO,SAACC,GAAD,OAAYA,EAAM7D,MAAM8D,SAASJ,IAC1CG,EAAM5D,SAAS6D,SAASJ,IACxBG,EAAM3D,UAAU4D,SAASJ,GAC1BC,EAAcI,KAAKF,QACnBG,KACJxE,KAAK8C,SAAS,CACZjB,WAAYqC,EACZnD,OAAQoD,M,uCAIM,IACRpD,EAAWf,KAAKC,MAAhBc,OACAI,EAAmBnB,KAAKyC,MAAxBtB,eACFgD,EAAgB,IACC,IAAnBhD,GACFJ,EAAOqD,QAAO,SAACC,GAAD,OAAiC,IAArBA,EAAM1B,WAAsBwB,EAAcI,KAAKF,QAASG,KAClFxE,KAAK8C,SAAS,CACZ3B,gBAAgB,EAChBO,cAAe,GACfX,OAAQoD,KAGVnE,KAAK8C,SAAS,CACZ3B,gBAAgB,EAChBO,cAAe,GACfX,a,qCAKmB,IAAX8B,EAAU,EAAVA,OACJ9B,EAAWf,KAAKC,MAAhBc,OACFmD,EAAIrB,EAAOjB,MACXuC,EAAgB,GACtBpD,EAAOqD,QAAO,SAACC,GAAD,OAAYA,EAAM3B,QAAUwB,GAAW,KAANA,EAAWC,EAAcI,KAAKF,QAASG,KACtFxE,KAAK8C,SAAS,CACZ3B,gBAAgB,EAChBO,cAAewC,EACfnD,OAAQoD,M,+BAIF,IAAD,SACuDnE,KAAKyC,MAA3DZ,EADD,EACCA,WAAYV,EADb,EACaA,eAAgBO,EAD7B,EAC6BA,cAAeX,EAD5C,EAC4CA,OACnD,OACE,6BACE,0DACA,kBAAC,EAAD,CACEc,WAAYA,EACZC,mBAAoB,SAACkB,GAAD,OAAW,EAAKa,WAAWb,IAC/C7B,eAAgBA,EAChBC,mBAAoB,kBAAM,EAAK0C,kBAC/BpC,cAAeA,EACfC,sBAAuB,SAACqB,GAAD,OAAW,EAAKe,YAAYf,MAErD,kBAAC,EAAD,CAAWjC,OAAQA,IACnB,kBAAC,EAAD,CAAUsC,QAAS,SAACL,GAAD,OAAW,EAAKK,QAAQL,W,GA1FxB3C,aC0CZU,EAhDA,CACb,CACEP,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXX,OAAQ,IACRY,UAAW,0CACXgC,YAAY,EACZD,MAAO,UAET,CACElC,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXX,OAAQ,IACRY,UAAW,0CACXgC,YAAY,EACZD,MAAO,WAET,CACElC,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXX,OAAQ,EACRY,UAAW,oCACXgC,YAAY,EACZD,MAAO,UAET,CACElC,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXX,OAAQ,IACRY,UAAW,6BACXgC,YAAY,EACZD,MAAO,UAET,CACElC,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXX,OAAQ,IACRY,UAAW,oCACXgC,YAAY,EACZD,MAAO,YChCI+B,G,6KARX,OACE,4BAAQvE,UAAU,qBAChB,wBAAIA,UAAU,cAAd,4B,GAJaE,IAAMC,YC6BZqE,E,kDAxBb,aAAe,IAAD,8BACZ,gBAEKC,WAAa,EAAKA,WAAWvC,KAAhB,gBAClB,EAAKK,MAAQ,CAAE1B,OAAQ6D,GAJX,E,yDAQZ,IAAMC,EAAW7E,KAAKyC,MACtBqC,QAAQC,IAAIF,K,+BAGJ,IAAD,OACC9D,EAAWf,KAAKyC,MAAhB1B,OACR,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAca,OAAQA,IACtB,4BAAQQ,KAAK,SAAS8B,QAAS,kBAAM,EAAKsB,eAA1C,yB,GAnBUvE,IAAMC,WCMJ2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2004725c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","import React from 'react';\n\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={rating} />\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends Component {\n  renderFavorite() {\n    const { bookmarkedOnly, onBookmarkedChange } = this.props;\n    return (\n      <label htmlFor=\"check\" data-testid=\"checkbox-input-label\">\n        <input\n          id=\"check\"\n          className=\"check\"\n          data-testid=\"checkbox-input\"\n          type=\"checkbox\"\n          checked={bookmarkedOnly}\n          onChange={onBookmarkedChange}\n        />\n        Mostrar somente favoritos\n      </label>\n    );\n  }\n\n  renderSelect() {\n    const { selectedGenre, onSelectedGenreChange } = this.props;\n    return (\n      <label htmlFor=\"filter\" data-testid=\"select-input-label\">\n      Filtrar por gênero\n        <select\n          data-testid=\"select-input\"\n          id=\"filter\"\n          value={selectedGenre}\n          onChange={onSelectedGenreChange}\n        >\n          <option data-testid=\"select-option\" value=\"\">Todos</option>\n          <option data-testid=\"select-option\" value=\"action\">Ação</option>\n          <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n          <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { searchText, onSearchTextChange } = this.props;\n    return (\n      <form className=\"search-bar-form\" data-testid=\"search-bar-form\">\n        <label htmlFor=\"sea\" data-testid=\"text-input-label\">\n          Inclui o texto:\n          <input\n            id=\"sea\"\n            data-testid=\"text-input\"\n            type=\"text\"\n            placeholder=\"Escreva aqui\"\n            value={searchText}\n            onChange={onSearchTextChange}\n          />\n        </label>\n        {this.renderFavorite()}\n        {this.renderSelect()}\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newState = this.newState.bind(this);\n    this.newRating = this.newRating.bind(this);\n    this.returnState = this.returnState.bind(this);\n    this.newFavorite = this.newFavorite.bind(this);\n    this.reset = this.reset.bind(this);\n\n    this.state = {\n      title: '',\n      subtitle: '',\n      storyline: '',\n      rating: 0,\n      imagePath: '',\n      genre: 'action',\n      bookmarked: false,\n    };\n  }\n\n  newState({ target }, stateKey) { // target = alteredValue\n    this.setState({ [stateKey]: target.value });\n  }\n\n  newRating({ target }, stateKey) {\n    this.setState({ [stateKey]: Number(target.value) });\n  }\n\n  newFavorite({ target }, stateKey) {\n    if (target.value) {\n      this.setState({ [stateKey]: true });\n    } else {\n      this.setState({ [stateKey]: false });\n    }\n  }\n\n  reset() {\n    this.setState({\n      title: '',\n      subtitle: '',\n      storyline: '',\n      rating: 0,\n      imagePath: '',\n      genre: 'action',\n      bookmarked: true,\n    });\n  }\n\n  // if necessário para setar o estado, senão só retornaria o estado.\n  returnState(event, myFunctReset) {\n    const newState = this.state;\n    if (event && myFunctReset) {\n      this.setState(newState);\n    }\n    return newState;\n  }\n\n  renderTitle() {\n    const { title } = this.state;\n    return (\n      <label htmlFor=\"title\" data-testid=\"title-input-label\">\n      Título\n        <input\n          type=\"text\"\n          value={title}\n          id=\"title\"\n          data-testid=\"title-input\"\n          onChange={(alteredValue) => this.newState(alteredValue, 'title')}\n        />\n      </label>\n    );\n  }\n\n  renderSubTitle() {\n    const { subtitle } = this.state;\n    return (\n      <label htmlFor=\"subtitle\" data-testid=\"subtitle-input-label\">\n      Subtítulo\n        <input\n          type=\"text\"\n          value={subtitle}\n          id=\"subtitle\"\n          data-testid=\"subtitle-input\"\n          onChange={(alteredValue) => this.newState(alteredValue, 'subtitle')}\n        />\n      </label>\n    );\n  }\n\n  renderImage() {\n    const { imagePath } = this.state;\n    return (\n      <label htmlFor=\"imagePath\" data-testid=\"image-input-label\">\n      Imagem\n        <input\n          type=\"text\"\n          value={imagePath}\n          id=\"imagePath\"\n          data-testid=\"image-input\"\n          onChange={(alteredValue) => this.newState(alteredValue, 'imagePath')}\n        />\n      </label>\n    );\n  }\n\n  renderStoryline() {\n    const { storyline } = this.state;\n    return (\n      <label htmlFor=\"storyline\" data-testid=\"storyline-input-label\">\n      Sinopse\n        <textarea\n          value={storyline}\n          id=\"storyline\"\n          data-testid=\"storyline-input\"\n          cols=\"30\"\n          rows=\"10\"\n          onChange={(alteredValue) => this.newState(alteredValue, 'storyline')}\n        />\n      </label>\n    );\n  }\n\n  renderRate() {\n    const { rating } = this.state;\n    return (\n      <label htmlFor=\"rate\" data-testid=\"rating-input-label\">\n      Avaliação\n        <input\n          type=\"number\"\n          id=\"rate\"\n          value={rating}\n          data-testid=\"rating-input\"\n          onChange={(alteredValue) => this.newRating(alteredValue, 'rating')}\n        />\n      </label>\n    );\n  }\n\n  renderGenero() {\n    const { genre } = this.state;\n    return (\n      <label htmlFor=\"genre\" data-testid=\"genre-input-label\">\n      Gênero\n        <select data-testid=\"genre-input\" value={genre} id=\"genre\" onChange={(alteredValue) => this.newState(alteredValue, 'genre')}>\n          <option data-testid=\"genre-option\" value=\"action\">Ação</option>\n          <option data-testid=\"genre-option\" value=\"comedy\">Comédia</option>\n          <option data-testid=\"genre-option\" value=\"thriller\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderFavorite() {\n    const { bookmarked } = this.state;\n    return (\n      <label htmlFor=\"favorite\" data-testid=\"bookmarked-input-label\">\n      Favorito\n        <input\n          type=\"checkbox\"\n          id=\"favorite\"\n          value={bookmarked}\n          data-testid=\"bookmarked-input\"\n          onChange={(event) => this.newFavorite(event, 'bookmarked')}\n        />\n      </label>\n    );\n  }\n\n  render() {\n    const { onClick } = this.props;\n    return (\n      <form className=\"add-movie-form\" data-testid=\"add-movie-form\">\n        {this.renderTitle()}\n        {this.renderSubTitle()}\n        {this.renderImage()}\n        {this.renderStoryline()}\n        {this.renderRate()}\n        {this.renderGenero()}\n        {this.renderFavorite()}\n        <button\n          type=\"button\"\n          data-testid=\"send-button\"\n          onClick={(event) => onClick(this.returnState(event, this.reset()))}\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { onClick: PropTypes.func.isRequired };\n\nexport default AddMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleText = this.handleText.bind(this);\n    this.handleFavorite = this.handleFavorite.bind(this);\n    this.handleGenre = this.handleGenre.bind(this);\n    this.onClick = this.onClick.bind(this);\n\n    const { movies } = this.props;\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n  }\n\n  onClick(event) {\n    const { movies } = this.props;\n    const newMovie = event;\n    this.setState({\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: movies.concat(newMovie),\n    });\n  }\n\n  handleText({ target }) {\n    const { movies } = this.props;\n    const e = target.value;\n    const newMoviesList = [];\n    movies.filter((Movie) => (Movie.title.includes(e)\n      || Movie.subtitle.includes(e)\n      || Movie.storyline.includes(e)\n      ? newMoviesList.push(Movie)\n      : undefined));\n    this.setState({\n      searchText: e,\n      movies: newMoviesList,\n    });\n  }\n\n  handleFavorite() {\n    const { movies } = this.props;\n    const { bookmarkedOnly } = this.state;\n    const newMoviesList = [];\n    if (bookmarkedOnly === false) {\n      movies.filter((Movie) => (Movie.bookmarked === true ? newMoviesList.push(Movie) : undefined));\n      this.setState({\n        bookmarkedOnly: true,\n        selectedGenre: '',\n        movies: newMoviesList,\n      });\n    } else {\n      this.setState({\n        bookmarkedOnly: false,\n        selectedGenre: '',\n        movies,\n      });\n    }\n  }\n\n  handleGenre({ target }) {\n    const { movies } = this.props;\n    const e = target.value;\n    const newMoviesList = [];\n    movies.filter((Movie) => (Movie.genre === e || e === '' ? newMoviesList.push(Movie) : undefined));\n    this.setState({\n      bookmarkedOnly: false,\n      selectedGenre: e,\n      movies: newMoviesList,\n    });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\n    return (\n      <div>\n        <h2> My awesome movie library </h2>\n        <SearchBar\n          searchText={searchText}\n          onSearchTextChange={(event) => this.handleText(event)}\n          bookmarkedOnly={bookmarkedOnly}\n          onBookmarkedChange={() => this.handleFavorite()}\n          selectedGenre={selectedGenre}\n          onSelectedGenreChange={(event) => this.handleGenre(event)}\n        />\n        <MovieList movies={movies} />\n        <AddMovie onClick={(event) => this.onClick(event)} />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport MovieLibrary from './components/MovieLibrary';\nimport data from './data';\nimport './App.css';\nimport Header from './components/Header';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.onclickBtn = this.onclickBtn.bind(this);\n    this.state = { movies: data };\n  }\n\n  onclickBtn() {\n    const oldState = this.state;\n    console.log(oldState);\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <MovieLibrary movies={movies} />\n        <button type=\"button\" onClick={() => this.onclickBtn()}>Console do state</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}